{"version":3,"sources":["contexts/LearningContext.js","components/Navbar.js","components/LearnDetails.js","components/LearningList.js","components/NewLearnForm.js","App.js","serviceWorker.js","index.js"],"names":["LearningContext","createContext","LearningContextProvider","props","useState","learns","setLearns","useEffect","window","localStorage","setItem","JSON","stringify","Provider","value","addLearn","date","description","console","log","_","orderBy","id","uuidv4","removeLearn","filter","learn","editLearn","newText","newLearns","i","length","children","Navbar","useContext","className","LearnDetails","edit","setEdit","setDescription","class","title","secondaryFooterActions","content","destructive","onAction","primaryFooterAction","Section","name","rows","cols","placeholder","onChange","e","target","required","LearningList","map","key","NewLearnForm","setDate","onSubmit","preventDefault","type","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a346d9d.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport _ from \"lodash\";\nexport const LearningContext = createContext();\n\nconst LearningContextProvider = props => {\n  const [learns, setLearns] = useState([\n    //we can delete this if you want i just had it to test\n    // { date: \"May 29\", description: \"learned how to play the ukulele\", id: 1 }\n    // { date: \"May 21\", description: \"learned how to play the ukulele\", id: 2 }\n    // { date: \"May 11\", description: \"learned how to play the ukulele\", id: 3 }\n  ]);\n\n  // const storage = () => {\n  //   return (\n  //     localData ? JSON.parse(localData): []\n  //   );\n  // }\n\n  useEffect(() =>{\n    window.localStorage.setItem('learns', JSON.stringify(learns))\n  },[learns]\n  ) \n\n  const addLearn = (date, description) => {\n    console.log(learns);\n    setLearns(\n      _.orderBy(\n        [...learns, { date, description, id: uuidv4() }],\n        [\"date\"], [\"desc\"]\n      )\n    );\n  };\n\n  const removeLearn = id => {\n    setLearns(learns.filter(learn => learn.id !== id));\n  };\n  //so first you need to write a fucntion that checks ids and finds the index of the learn you wanna edit\n  //then you just call useState with all the ... business and just edit the text\n  //for that object at that index\n  //THIS FILE just handles data changes not the visual presentation\n  const editLearn = (id, newText) => {\n    let newLearns = learns;\n\n    for (let i = 0; i < learns.length; i++) {\n      if (learns[i].id === id) {\n        newLearns[i].description = newText;\n        setLearns(newLearns);\n      }\n    }\n  };\n  //for loop to find index -> put the value in a variable\n  //setLearn call with the ... stuff to change the value\n\n  return (\n    <LearningContext.Provider\n      value={{ learns, addLearn, removeLearn, editLearn }}\n    >\n      {props.children}\n    </LearningContext.Provider>\n  );\n};\nexport default LearningContextProvider;\n","import React, {Component, useContext} from 'react';\nimport { LearningContext } from '../contexts/LearningContext';\n\nconst Navbar = () => {\n\n    const {learns} = useContext(LearningContext); \n    return (\n        <div className=\"container mt-5\">\n          <div className=\"row text-center\">\n            <span className=\"heart-falling\">&#10084;</span>\n            <span className=\"heart-falling\">&#10084;</span>\n            <span className=\"heart-falling\">&#10084;</span>\n            <span className=\"heart-falling\">&#10084;</span>\n            <span className=\"heart-falling\">&#10084;</span>\n            </div>\n          <div className=\"row\">\n            <div className=\"col\">\n            {learns.length > 0 && \n                <h2>I learned {learns.length} things...</h2>\n            }\n            {learns.length <= 0  && \n                <h2>Start learning new things!</h2>\n            }\n            </div>\n          </div>\n          <div className=\"row info\">\n            <div className=\"col\">\n              <p>Not every day needs to be productive or involve shipping code. But every day is about learning something new whether it be about technology, life lessons, and the why - why we do the things we do. Life is short.</p>\n            </div>\n          </div>\n          </div>\n        );\n    }\n\nexport default Navbar; ","import React, { useContext, useState } from \"react\";\nimport { LearningContext } from \"../contexts/LearningContext\";\nimport { AppProvider, Card } from \"@shopify/polaris\";\n\n// need access to learn inside this component\nconst LearnDetails = ({ learn }) => {\n  const { removeLearn, editLearn } = useContext(LearningContext);\n  const [edit, setEdit] = useState(false);\n  const [description, setDescription] = useState(learn.description);\n  const renderTextField = () => {\n    return (\n      <textarea className=\"text-edit\"\n        name=\"textarea\"\n        rows=\"4\"\n        cols=\"5\"\n        placeholder=\"what you learned\"\n        value={description}\n        onChange={e => setDescription(e.target.value)}\n        required\n      />\n    );\n  };\n\n  return (\n    <div className=\"container mt-5\">\n    <AppProvider>\n      <div class=\"learning-cards\">\n        <Card\n          title={learn.date}\n          secondaryFooterActions={[\n            {\n              content: \"Delete Entry\",\n              destructive: true,\n              onAction: () => removeLearn(learn.id)\n            }\n          ]}\n          primaryFooterAction={\n            !edit\n              ? {\n                  content: \"Change what you learned\",\n                  onAction: () => {\n                    setEdit(true);\n                  }\n                }\n              : {\n                  content: \"Save changes\",\n                  onAction: () => {\n                    editLearn(learn.id, description);\n                    setEdit(false);\n                  }\n                }\n          }\n        >\n          <Card.Section>\n            {!edit ? learn.description : renderTextField()}\n          </Card.Section>\n        </Card>\n      </div>\n    </AppProvider>\n    </div>\n  );\n};\n\nexport default LearnDetails;\n","import React, { useState, useContext } from \"react\";\nimport \"../index.css\";\nimport { LearningContext } from \"../contexts/LearningContext\";\nimport LearnDetails from \"./LearnDetails\";\n\nconst LearningList = props => {\n  const { learns } = useContext(LearningContext);\n  return (\n    <div>\n      <ul>\n        {learns.map(learn => {\n          return <LearnDetails learn={learn} key={learn.id} />;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default LearningList;\n","import React, { useState, useContext } from \"react\";\nimport { LearningContext } from \"../contexts/LearningContext\";\nconst NewLearnForm = ({}) => {\n  const { addLearn } = useContext(LearningContext);\n  const [date, setDate] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const handleSubmit = e => {\n    e.preventDefault();\n    addLearn(date, description);\n    setDate(\"\");\n    setDescription(\"\");\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"row\">\n        <div class=\"col-3\">\n          <input\n          type=\"date\"\n          placeholder=\"date\"\n          value={date}\n          onChange={e => setDate(e.target.value)}\n          required\n        />\n        </div>\n        <div className=\"col-9\">\n          <textarea\n          name=\"textarea\"\n          rows=\"4\"\n          cols=\"5\"\n          placeholder=\"What I learned\"\n          value={description}\n          onChange={e => setDescription(e.target.value)}\n          required\n        />\n        </div>\n      </div>\n      \n      \n\n      {/* storing what the user enters in a local state */}\n      {/* gets us the value inside the input form */}\n      <input type=\"submit\" className=\"submit-learn\" value=\"Add what I learned\" />\n    </form>\n  );\n};\n\nexport default NewLearnForm;\n","import React, {useState} from 'react';\nimport Navbar from './components/Navbar';\nimport LearningList from './components/LearningList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@shopify/polaris/styles.css';\nimport './index.css'; \nimport LearningContextProvider from './contexts/LearningContext';\nimport NewLearnForm from './components/NewLearnForm';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n       <div className=\"container mt-5\">\n\n\n    <LearningContextProvider>\n    <Navbar/>\n    <NewLearnForm/>\n\n    <LearningList/>\n\n    </LearningContextProvider>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}